{
  "rules": [
    {
      "name": "Component Directory Structure",
      "description": "Ensure all reusable components are placed in the src/components directory.",
      "pattern": "src/components/**/*.js",
      "message": "Reusable components should be placed in the src/components directory. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "App Router Structure",
      "description": "Ensure all page components are placed in the src/app directory and follow the App Router conventions.",
      "pattern": "src/app/**/*.{js,jsx,ts,tsx}",
      "message": "Page components should be placed in the src/app directory and follow App Router conventions. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Global Styles",
      "description": "Ensure global styles are defined in src/app/globals.css.",
      "pattern": "src/app/globals.css",
      "message": "Global styles should be defined in src/app/globals.css. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Configuration Files",
      "description": "Ensure configuration files are in the root directory.",
      "pattern": [
        "jsconfig.json",
        "next.config.mjs",
        "postcss.config.mjs",
        ".eslintrc.json"
      ],
      "message": "Configuration files should be in the root directory. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "CSS Class Naming",
      "description": "Ensure CSS classes follow BEM naming convention.",
      "pattern": "**/*.css",
      "message": "CSS classes should follow BEM naming convention. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Import Paths",
      "description": "Ensure import paths use aliases defined in jsconfig.json and follow App Router conventions.",
      "pattern": "**/*.{js,jsx,ts,tsx}",
      "message": "Import paths should use aliases defined in jsconfig.json and follow App Router conventions. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "^import .* from ['\"](@/|next/|react)",
        "message": "Use aliases defined in jsconfig.json for import paths and follow App Router conventions. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Tailwind CSS Usage",
      "description": "Ensure Tailwind CSS classes are used for styling.",
      "pattern": "**/*.js",
      "message": "Use Tailwind CSS classes for styling. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Data and Content Reference Files",
      "description": "Ensure all data and content used in the app are placed into reference files.",
      "pattern": "**/*.js",
      "message": "Data and content should be placed in reference files. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]@/data/",
        "message": "Data and content should be imported from reference files in the @/data directory. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Internationalization",
      "description": "Ensure all text strings are internationalized.",
      "pattern": "**/*.js",
      "message": "Text strings should be internationalized. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]@/locales/",
        "message": "Text strings should be imported from internationalization files in the @/locales directory. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Chakra UI Usage",
      "description": "Ensure Chakra UI components are used for building accessible and responsive user interfaces.",
      "pattern": "**/*.js",
      "message": "Use Chakra UI components for building accessible and responsive user interfaces. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]@chakra-ui/react['\"]",
        "message": "Use Chakra UI components for building accessible and responsive user interfaces. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Zustand Usage",
      "description": "Ensure Zustand is used for lightweight state management.",
      "pattern": "src/store/**/*.js",
      "message": "Use Zustand for lightweight state management. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import create from ['\"]zustand['\"]",
        "message": "Use Zustand for lightweight state management. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "React Hook Form Usage",
      "description": "Ensure React Hook Form is used for efficient form state and validation management.",
      "pattern": "**/*.js",
      "message": "Use React Hook Form for efficient form state and validation management. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]react-hook-form['\"]",
        "message": "Use React Hook Form for efficient form state and validation management. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Framer Motion Usage",
      "description": "Ensure Framer Motion is used for smooth animations and transitions.",
      "pattern": "**/*.js",
      "message": "Use Framer Motion for smooth animations and transitions. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]framer-motion['\"]",
        "message": "Use Framer Motion for smooth animations and transitions. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "React Query Usage",
      "description": "Ensure React Query is used for optimized data fetching, caching, and synchronization.",
      "pattern": "**/*.js",
      "message": "Use React Query for optimized data fetching, caching, and synchronization. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]@tanstack/react-query['\"]",
        "message": "Use React Query for optimized data fetching, caching, and synchronization. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "React Icons Usage",
      "description": "Ensure React Icons are used for a comprehensive set of icons in reusable UI components.",
      "pattern": "**/*.js",
      "message": "Use React Icons for a comprehensive set of icons in reusable UI components. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "import .* from ['\"]react-icons['\"]",
        "message": "Use React Icons for a comprehensive set of icons in reusable UI components. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Functional Components",
      "description": "Ensure components are written as functional components with hooks.",
      "pattern": "**/*.js",
      "message": "Use functional components with hooks. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "function.*\\(\\).*{",
        "message": "Use arrow function syntax for component definitions. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Prop Destructuring",
      "description": "Ensure props are destructured in component parameters.",
      "pattern": "**/*.js",
      "message": "Use prop destructuring in component parameters. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "const.*=.*props\\.",
        "message": "Destructure props in component parameters. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Async/Await Usage",
      "description": "Ensure async/await is used for asynchronous operations.",
      "pattern": "**/*.js",
      "message": "Use async/await for asynchronous operations. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "\\.then\\(",
        "message": "Use async/await instead of .then() for asynchronous operations. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Documentation Reference",
      "description": "Ensure all major decisions, code updates, and project actions reference the documentation in the /docs directory.",
      "pattern": "**/*.{js,jsx,ts,tsx,md}",
      "message": "Always reference relevant documentation in /docs when making decisions or changes. Update docs if necessary."
    },
    {
      "name": "Documentation Update - Code Changes",
      "description": "Ensure documentation is updated when making significant code changes.",
      "pattern": "**/*.{js,jsx,ts,tsx}",
      "message": "Update relevant documentation in /docs to reflect this code change."
    },
    {
      "name": "Documentation Update - Manual Changes",
      "description": "Ensure documentation changes are consistent across all relevant files.",
      "pattern": "docs/**/*.md",
      "message": "Check and update other relevant documentation files to maintain consistency."
    },
    {
      "name": "Feature Documentation",
      "description": "Ensure new features are documented.",
      "pattern": "src/**/*.{js,jsx,ts,tsx}",
      "message": "Document this new feature in /docs/features.md and update other relevant documentation."
    },
    {
      "name": "Architecture Documentation",
      "description": "Ensure architectural changes are documented.",
      "pattern": "src/**/*.{js,jsx,ts,tsx}",
      "message": "Update /docs/architecture.md if this change affects the project's architecture."
    },
    {
      "name": "Convention Documentation",
      "description": "Ensure new conventions are documented.",
      "pattern": "**/*.{js,jsx,ts,tsx,css,scss}",
      "message": "Document any new conventions introduced by this change in /docs/conventions.md."
    },
    {
      "name": "Changelog Update",
      "description": "Ensure the changelog is updated for significant changes.",
      "pattern": "**/*.{js,jsx,ts,tsx,md}",
      "message": "Update /docs/changelog.md to reflect this significant change."
    },
    {
      "name": "Development Guide Update",
      "description": "Ensure the development guide is updated when development processes change.",
      "pattern": "**/*.{js,jsx,ts,tsx,json,yml,yaml}",
      "message": "Update /docs/development-guide.md if this change affects the development process."
    },
    {
      "name": "Layout Components",
      "description": "Ensure layout components are properly structured for App Router.",
      "pattern": "src/app/**/layout.{js,jsx,ts,tsx}",
      "message": "Layout components should follow App Router conventions. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Page Components",
      "description": "Ensure page components are properly structured for App Router.",
      "pattern": "src/app/**/page.{js,jsx,ts,tsx}",
      "message": "Page components should follow App Router conventions. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Route Groups",
      "description": "Ensure route groups are properly used in the App Router structure.",
      "pattern": "src/app/**/(*)/**",
      "message": "Route groups should be properly structured. See [conventions.md](docs/conventions.md) for details."
    },
    {
      "name": "Zustand Store Creation",
      "description": "Ensure Zustand stores are created correctly in the src/store directory.",
      "pattern": "src/store/**/*.js",
      "message": "Zustand stores should be created using the 'create' function from Zustand. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "export const use\\w+Store = create\\(",
        "message": "Use the 'create' function to create Zustand stores. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Zustand Store Usage in Components",
      "description": "Ensure components use Zustand stores for global state management.",
      "pattern": "src/components/**/*.js",
      "message": "Use Zustand stores for global state management in components. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "const \\{.*\\} = use\\w+Store\\(\\)",
        "message": "Use Zustand stores for accessing global state in components. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Avoid React useState for Global State",
      "description": "Ensure React's useState is not used for global state management.",
      "pattern": "src/**/*.js",
      "message": "Avoid using React's useState for global state management. Use Zustand stores instead. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "const \\[\\w+, set\\w+\\] = useState\\(",
        "message": "Consider using Zustand for global state management instead of React's useState. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Use Store Actions for State Modifications",
      "description": "Ensure state modifications are done through store actions.",
      "pattern": "src/**/*.js",
      "message": "Use store actions to modify state. Avoid direct state mutations. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "set\\(.*\\)",
        "message": "Use store actions to modify state. Avoid direct state mutations. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Custom Hooks for State Logic",
      "description": "Encourage the use of custom hooks for encapsulating state-related logic.",
      "pattern": "src/hooks/**/*.js",
      "message": "Use custom hooks to encapsulate common state-related logic. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "export const use\\w+ = \\(",
        "message": "Create custom hooks to encapsulate common state-related logic. See [conventions.md](docs/conventions.md) for details."
      }
    },
    {
      "name": "Persist Middleware Usage",
      "description": "Ensure the persist middleware is used for stores that need to persist data.",
      "pattern": "src/store/**/*.js",
      "message": "Use the persist middleware for stores that need to persist data. See [conventions.md](docs/conventions.md) for details.",
      "regex": {
        "pattern": "persist\\(",
        "message": "Consider using the persist middleware for stores that need to persist data. See [conventions.md](docs/conventions.md) for details."
      }
    }
  ]
}
